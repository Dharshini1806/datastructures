#include <stdio.h>
#include <stdlib.h>
struct Node 
{   
  int data;
  struct Node* prev;
  struct Node* next;
};
void deleteNode(struct Node** head_ref, struct Node* del) 
{
  if (*head_ref == NULL || del == NULL) 
    return;
  if (*head_ref == del) 
    *head_ref = del->next;
  if (del->next != NULL)
    del->next->prev = del->prev;
  if (del->prev != NULL) 
    del->prev->next = del->next;
  free(del);
}
void printList(struct Node* node) 
{
   struct Node* last;
   printf("\nTraversal in forward direction \n");
   while (node != NULL) 
   {
     printf(" %d ", node->data);
     last = node;
     node = node->next;
   }
   printf("\nTraversal in reverse direction \n");
   while (last != NULL) 
   {
     printf(" %d ", last->data);
     last = last->prev;
  }
}
int main()
{
  struct Node* head = NULL;
  struct Node* second = NULL;
  struct Node* third = NULL;
  head = (struct Node*)malloc(sizeof(struct Node));
  second = (struct Node*)malloc(sizeof(struct Node));
  third = (struct Node*)malloc(sizeof(struct Node));
  head->data = 1;
  head->prev = NULL;
  head->next = second;
  second->data = 2;
  second->prev = head;
  second->next = third;
  third->data = 3;
  third->prev = second;
  third->next = NULL;
  printf("Doubly linked list before deletion: ");
  printList(head);
  deleteNode(&head, second);
  printf("\nDoubly linked list after deletion of node with value 2: ");
  printList(head);
  return 0;
}
