#include <stdio.h>
#include <stdlib.h>
Struct StackNode {
    Int data;
    Struct StackNode* next;
};
Struct StackNode* createStackNode(int data) {
    Struct StackNode* newNode = (struct StackNode*)malloc(sizeof(struct StackNode));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
Int isStackEmpty(struct StackNode* top) {
    Return !top;
}
Void push(struct StackNode** top_ref, int data) {
    Struct StackNode* newNode = createStackNode(data);
    newNode->next = *top_ref;
    *top_ref = newNode;
}
Int pop(struct StackNode** top_ref) {
    If (isStackEmpty(*top_ref)) {
        Printf(“Stack Underflow\n”);
        Exit(0);
    }
    Struct StackNode* temp = *top_ref;
    *top_ref = (*top_ref)->next;
    Int popped = temp->data;
    Free(temp);
    Return popped;
}
Struct Queue {
    Struct StackNode* stack1;
    Struct StackNode* stack2;
};
Struct Queue* createQueue() {
    Struct Queue* queue = (struct Queue*)malloc(sizeof(struct Queue));
    Queue->stack1 = NULL;
    Queue->stack2 = NULL;
    Return queue;
}
Void enqueue(struct Queue* queue, int data) {
    Push(&queue->stack1, data);
}
Int dequeue(struct Queue* queue) {
    If (isStackEmpty(queue->stack1) && isStackEmpty(queue->stack2)) {
        Printf(“Queue Underflow\n”);
        Exit(0);
    }
    If (isStackEmpty(queue->stack2)) {
        While (!isStackEmpty(queue->stack1)) {
            Int data = pop(&queue->stack1);
            Push(&queue->stack2, data);
        }
    }
    Return pop(&queue->stack2);
}
Int main() {
    Struct Queue* queue = createQueue();
    Enqueue(queue, 10);
    Enqueue(queue, 20);
    Enqueue(queue, 30);
    Printf(“Dequeued element is %d\n”, dequeue(queue));
    Printf(“Dequeued element is %d\n”, dequeue(queue));
    Printf(“Dequeued element is %d\n”, dequeue(queue));
    Return 0;
}
