#include <stdio.h>
#include <stdlib.h>
Struct Node {
    Int data;
    Struct Node* next;
};
Struct Node* createNode(int data) {
    Struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}
Void insertAtBeginning(struct Node** head_ref, int new_data) {
    Struct Node* newNode = createNode(new_data);
    newNode->next = *head_ref;
    *head_ref = newNode;
}
Void insertAtEnd(struct Node** head_ref, int new_data) {
    Struct Node* newNode = createNode(new_data);
    If (*head_ref == NULL) {
        *head_ref = newNode;
        Return;
    }
    Struct Node* last = *head_ref;
    While (last->next != NULL) {
        Last = last->next;
    }
    Last->next = newNode;
}
Void insertAfterNode(struct Node* prev_node, int new_data) {
    If (prev_node == NULL) {
        Printf(“The given previous node cannot be NULL”);
        Return;
    }
    Struct Node* newNode = createNode(new_data);
    newNode->next = prev_node->next;
    prev_node->next = newNode;
}
Void insertBeforeNode(struct Node** head_ref, struct Node* next_node, int new_data) {
    If (*head_ref == NULL || next_node == NULL) {
        Printf(“The given next node cannot be NULL”);
        Return;
    }
    Struct Node* newNode = createNode(new_data);
    If (*head_ref == next_node) {
        newNode->next = *head_ref;
        *head_ref = newNode;
        Return;
    }
    Struct Node* prev = NULL;
    Struct Node* current = *head_ref;
    While (current != NULL && current != next_node) {
        Prev = current;
        Current = current->next;
    }
    If (current == NULL) {
        Printf(“The given next node is not present in the list”);
        Return;
    }
    Prev->next = newNode;
    newNode->next = current;
}
Void printList(struct Node* node) {
    While (node != NULL) {
        Printf(“%d -> “, node->data);
        Node = node->next;
    }
    Printf(“NULL\n”);
}
Int main() {
    Struct Node* head = NULL;
    insertAtEnd(&head, 6);
    insertAtBeginning(&head, 7);
    insertAtBeginning(&head, 1);
    insertAtEnd(&head, 4);
    insertAfterNode(head->next, 8);
    printf(“Linked list after insertions: “);
    printList(head);
    insertBeforeNode(&head, head->next, 5);
    printf(“Linked list after inserting 5 before the second node: “);
    printList(head);
    return 0;
}
